plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.flywaydb.flyway' version '10.16.0'
}

group = 'com.maru'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// ============== 의존성 버전 관리 ==============
ext {
    springBootVersion = '3.5.5'
    javaVersion = '21'
    lombokVersion = '1.18.30'
    jjwtVersion = '0.12.3'
    springdocVersion = '2.2.0'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // ============== Core ==============
    // Spring Boot Starter
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Spring Boot DevTools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // ============== Database==============
    // Spring Data JPA (includes Hibernate, HikariCP)
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // MySQL Connector
    runtimeOnly 'com.mysql:mysql-connector-j:8.0.33'

    // Flyway for DB migrations
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'

    // ============== Security & Authentication==============
    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // JWT
    implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"

    // ============== Development Tools ==============
    // Lombok (Entity 전용)
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // ============== API Documentation ==============
    // SpringDoc OpenAPI (Swagger UI)
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"

    // ============== Test ==============
    // Spring Boot Test (JUnit 5, Mockito 포함)
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

// ============== Test 설정 ==============
tasks.named('test') {
    useJUnitPlatform()
    
    // 테스트 리포트 설정
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

// ============== Flyway Gradle 설정 (CI에서 사용) ==============
flyway {
    // CI에서 -Dflyway.url, -Dflyway.user, -Dflyway.password 로 오버라이드하는 것을 권장합니다.
    // 아래 값은 로컬 기본값(없으면 무시)으로 남겨둡니다.
    url = System.getProperty('flyway.url', System.getenv('SPRING_DATASOURCE_URL') ?: '')
    user = System.getProperty('flyway.user', System.getenv('MYSQL_USER') ?: '')
    password = System.getProperty('flyway.password', System.getenv('MYSQL_PASSWORD') ?: '')
    locations = ["classpath:db/migration"]
}

// ============== Jar 설정 ==============
tasks.named('bootJar') {
    enabled = true
    archiveBaseName = 'maru-backend'
    archiveFileName = 'maru-backend.jar'
}

tasks.named('jar') {
    enabled = false
}

// ============== 컴파일 옵션 ==============
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}
